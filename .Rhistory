hugo new  --kind post blog/test_article
hugo new content/blog
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
render_page()
blogdown::render_page()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80), tidy=TRUE)
library(lubridate)
library(tidyverse)
library(GGally)
library(skimr)
library(lubridate)
library(fpp2)
library(zoo)
library(PerformanceAnalytics)
library(reshape2)
library(stats)
library(quantmod)
library(TTR)
library(scales)
# Data Import and Cleaning
import_data <-  function(source){
x <- read.csv(source, skip = 2)
x %>%
mutate(date = as.Date(x$Date, format = "%m/%d/%Y")) %>%
filter(date > as.Date("1989-12-31")) %>%
subset(data = x, select = -c(Date, Open, High, Low)) %>%
rename(close = Close,
ticker = Ticker) %>%
mutate(index = close/close[1])
}
precious_init <- import_data("data/sp_precmet.csv")
industrial_init <- import_data("data/sp_indmet.csv")
combined_indices <- full_join(industrial_init, precious_init, by = "date") %>%
rename(precious_metals = index.y,
pm_close = close.y,
ind_close = close.x,
industrial_metals = index.x) %>%
subset(select = -c(ticker.x, ticker.y)) %>%
head(-2)
combined_indices_pivot <-  combined_indices %>%
subset(select = -c(ind_close, pm_close)) %>%
gather(index, values, precious_metals:industrial_metals)
ggplot(combined_indices_pivot) +
geom_line(aes(x=date, y=values, color = index)) +
labs(title = "Plot of S&P GSCI Precious Metals and Industrial Metals Indices",
y = "Price, (1 = 1/1/1990)",
x= "Date",
caption = "GFD, S&P Indices as of 13 October 2020") +
scale_x_date(date_breaks = "12 months", date_labels =  "%Y") +
theme_minimal() +
theme(axis.text.x=element_text(angle=60, hjust=1)) +
scale_color_discrete(
name = "Series",
labels= c("Industrial Metals", "Precious Metals"))
# Return - Variance Calculation for the Separate Metals Indices
industrials_price <-
na.approx(zoo(combined_indices$ind_close, combined_indices$date))
precious_price <-
na.approx(zoo(combined_indices$pm_close, combined_indices$date))
rets_industry <-
Return.calculate(xts(industrials_price),  method = "discrete")
names(rets_industry) <- "return_ind"
rets_precious <-
Return.calculate(xts(precious_price),  method = "discrete")
names(rets_precious) <- "return_prec"
combined_indices <- cbind(combined_indices, rets_industry, rets_precious)
# Calculating Statistics for the Industrials Index
stats_industrials <- combined_indices %>%
summarise(mean_ind = mean(return_ind[-1]),
sd_ind = sd(return_ind[-1]))
# Calculating Statistics for the Precious Metals Index
stats_precious <- combined_indices %>%
summarise(mean_prec = mean(return_prec[-1]),
sd_prec = sd(return_prec[-1]))
# Efficient Portfolio
# Statistics for the Portfolio: Mean, StDev, Correlation
calc_efficient <- combined_indices %>%
summarise(mean_ind = mean(return_ind[-1]), mean_prec = mean(return_prec[-1]),
sd_ind = sd(return_ind[-1]), sd_prec = sd(return_prec[-1]),
corr_ind = cor(return_ind[-1],return_prec[-1]))
# Function to calculate the Weighting of Industrial Metals in the Final Portfolio
sh_r_max <- function(x){
(x*calc_efficient$mean_ind+(1-x)*calc_efficient$mean_prec)/
sqrt(x^2*calc_efficient$sd_ind^2+(1-x)^2*calc_efficient$sd_prec^2+2*x*(1-x)
*calc_efficient$sd_ind*calc_efficient$sd_prec*calc_efficient$corr_ind)
}
# Calculating optimal weights for industrial index
efficient_weight_opti <-
optimize(f = sh_r_max, lower = -1,upper = 1, maximum = TRUE)
# assigning weights to the two indices
weight_industrial <- efficient_weight_opti$objective
weight_precious <- 1-weight_industrial
# creating (theoretically) efficient combination
efficient_portfolio <- combined_indices %>%
mutate(
efficient =
weight_industrial * industrial_metals +
weight_precious * precious_metals) %>%
subset(select = c(date, efficient))
print(paste0("This portfolio gives a weight of ", percent(weight_precious, accuracy = 0.001), " to the Precious Metals Index, and a weighting of ", percent(weight_precious, accuracy = 0.001), " to the Industrial Metals Index"))
# Weights
eq_w_pm <- 0.5
eq_w_ind <- 1-eq_w_pm
# calculate index
eq_w_ind <- combined_indices %>%
mutate(eq_weight = eq_w_pm * precious_metals + eq_w_ind * industrial_metals) %>%
subset(select = c(date, eq_weight))
# Joining the Portfolios
# Add Equal Weights to Individual Indices
indices_equal <- right_join(eq_w_ind, combined_indices, by = "date") %>%
subset(select = -c(ind_close, pm_close )) %>%
subset(select = -c(return_ind, return_prec))
# Add Efficient Portfolio
four_portfolios_main <- left_join(indices_equal, efficient_portfolio, by = "date")
# combining the four portfolios into one
four_portfolios_consolidated <-
left_join(indices_equal, efficient_portfolio, by = "date") %>%
gather(index, values, eq_weight:efficient)
# Combination Graph
ggplot() +
geom_line(data = four_portfolios_consolidated,
aes(x=date, y=values, color = index), size = 0.4) +
labs(title = "Price Development of the Different Combinations of Metals Indices",
caption = "Source: Finaeon, S&P as of October 2020",
x = "Date",
y="Index (1 = 1/1/1990)") +
scale_color_brewer(
palette = "Dark2",
type = "qual",
name = "Series",
labels = c("Efficient Portfolio", "Equal Weights",
"Industrial Metals", "Precious Metals")) +
scale_x_date(date_breaks = "12 months", date_labels =  "%Y") +
theme_minimal() +
theme(axis.text.x=element_text(angle=60, hjust=1))
combined_indices %>%
subset(select = c(precious_metals, industrial_metals)) %>%
ggpairs(combined_indices)
portfolios_tma <- four_portfolios_consolidated %>%
group_by(index) %>%
mutate(tma100 = ma(values, order = 100, centre = TRUE))
eq_efficient <- portfolios_tma %>%
filter(index %in% c("eq_weight", "efficient"))
eq_efficient_clean <-  na.omit(lag(eq_efficient))
pfs_tma_dma <- eq_efficient_clean %>%
mutate(dema = DEMA(values, 10, wilder = TRUE))
ggplot(pfs_tma_dma) +
geom_line(aes(x = date, y=values, group = index),
alpha = 0.8, fill = "black", size = 0.2) +
geom_line(aes(x = date, y=tma100, color = index)) +
scale_color_brewer(palette="Dark2",
name = "Series",
labels = c("Efficient Portfolio", "Equal Weights")) +
scale_x_date(date_breaks = "12 months", date_labels =  "%Y") +
theme_minimal() +
theme(axis.text.x=element_text(angle=60, hjust=1)) +
labs(
title = "Triangular Moving Average",
subtitle = "Applied to the Efficient and Eq. Weights Portfolios",
x = "Date",
y = "Index (100 = 1/1/1990)"
)
ggplot(pfs_tma_dma) +
geom_line(aes(x = date, y=values, group = index),
alpha = 0.8, fill = "black", size = 0.2) +
geom_line(aes(x = date, y=dema, color = index)) +
scale_color_brewer(palette="Dark2",
name = "Series",
labels = c("Efficient Portfolio", "Equal Weights")) +
scale_x_date(date_breaks = "12 months", date_labels =  "%Y") +
theme_minimal() +
theme(axis.text.x=element_text(angle=60, hjust=1)) +
labs(
title = "Double Exponential Moving Average",
subtitle = "Applied to the Efficient and Eq. Weights Portfolios",
x = "Date",
y = "Index (100 = 1/1/1990)"
)
knitr::opts_chunk$set(echo = TRUE)
library(vroom)
library(tidyverse)
library(skimr)
library(leaflet)
library(sp)
library(rgdal)
library(mapview)
# Importing the HK Listings data from AirBnB
hk_listings <- vroom("http://data.insideairbnb.com/china/hk/hong-kong/2020-06-15/data/listings.csv.gz")
# Removing unused columns, to make the data more easy to handle for the entire group
hk_listings_clean <- hk_listings %>%
subset(select = c(listing_url, host_id, host_response_time, host_response_rate, host_acceptance_rate, host_is_superhost, host_total_listings_count, neighbourhood_cleansed, latitude, longitude, property_type, room_type, is_location_exact, accommodates, bedrooms, bathrooms, beds, price, cleaning_fee, guests_included, extra_people, minimum_nights, maximum_nights, review_scores_rating, number_of_reviews, is_business_travel_ready, instant_bookable, neighbourhood))
# filter(!is.na(neighbourhood))
# Converting price from character to number value for filtering in the map
hk_listings_clean$price <- parse_number(hk_listings_clean$price)
# Importing ShapeFile for Hong Kong, from https://opendata.esrichina.hk/datasets/eea8ff2f12b145f7b33c4eef4f045513_0
hk_dist <- readOGR("hk_dist_shp/HKDistrict18.shp")
# (My) R cannot deal with 11,000 + rows of data in leaflet with a shapefile, so I am using a random sample of the dataset to make the illustration
hk_cut <- hk_listings_clean %>%
sample_n(1000)
hk_cut$price_quant <- cut(hk_cut$price, breaks = c(0, 295, 481, 798, 2000))
# Factoring price according to the percentiles
factpal <- colorFactor(topo.colors(5), hk_listings_clean$price_quant)
pal <-  colorBin(palette =
c("#fef0d9", "#fdcc8a", "#fc8d59", "#e34a33", "#b30000"),
domain = hk_cut$price, bins = c(0, 200, 500, 800, 15000))
leaflet(hk_dist) %>%
# Adding polygons from hk_dist to be able to group data by district
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~pal(hk_cut$price),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE),
label = ~hk_cut$neighbourhood) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35)) %>%
addCircleMarkers(lng = ~hk_listings_clean$longitude,
lat = ~hk_listings_clean$latitude,
radius = 2,
fillColor = "#ff5a5f",
fillOpacity = 0.7,
popup = ~hk_listings_clean$listing_url,
label = ~hk_listings_clean$price,
stroke = 0.2,
clusterOptions = markerClusterOptions()
) %>%
addLegend("bottomright", pal = pal, values = "", labels = c("0-199", "200-499", "500-799", "800-15000", "1500+"), title = "AirBnB Prices in District", opacity = 1)
leaflet(hk_dist) %>%
# Adding polygons from hk_dist to be able to group data by district
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~pal(hk_cut$price),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE),
label = ~hk_cut$neighbourhood) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35)) %>%
addCircleMarkers(lng = ~hk_listings_clean$longitude,
lat = ~hk_listings_clean$latitude,
radius = 2,
fillColor = "#ff5a5f",
fillOpacity = 0.7,
popup = ~hk_listings_clean$listing_url,
label = ~hk_listings_clean$price,
stroke = 0.2,
clusterOptions = markerClusterOptions()
) %>%
addLegend("bottomright", pal = pal, values = "", labels = c("0-199", "200-499", "500-799", "800-15000", "1500+"), title = "AirBnB Prices in District", opacity = 1)
blogdown:::new_post_addin()
